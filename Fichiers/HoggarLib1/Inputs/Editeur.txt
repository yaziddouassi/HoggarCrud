<template>
  <div class="space-y-2">
    <!-- Label -->
    <div>
      <span class="font-bold">{{ hoggarinput.hogarDataLabels[props.cle] }}</span>
    </div>

    <!-- Éditeur Quill -->
    <div class="bg-white border border-gray-300 rounded-ls shadow-sm p-2">
      <div ref="editorContainer" class="w-full min-h-[120px]"></div>
    </div>

    <!-- Message d'erreur -->
    <div v-if="hoggarinput.errors[cle]" class="text-red-500 text-sm">
      {{ hoggarinput.errors[cle] }}
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, watch } from "vue";
import Quill from "quill";
import "quill/dist/quill.snow.css";
import { HoggarInput } from "@/HoggarLibs/stores/hoggarinput";

const props = defineProps({
  cle: {
    type: String,
    required: true,
  },
});

const hoggarinput = HoggarInput();
const editorContainer = ref(null);
const content = ref(hoggarinput.hogarDataValues[props.cle]);
let quill = null;

// Fonction pour ajuster la hauteur du contenu (sans toucher à la toolbar)
const adjustEditorHeight = () => {
  const qlContent = editorContainer.value.querySelector(".ql-editor");
  if (qlContent) {
    const scrollHeight = qlContent.scrollHeight;
    const container = editorContainer.value.querySelector(".ql-container");
    if (container) {
      container.style.height = scrollHeight + 20 + "px"; // petite marge
    }
  }
};

const quillOptions = {
  theme: "snow",
  modules: {
    toolbar: [
      [{ header: [1, 2, false] }],
      ["bold", "italic", "underline"],
      [{ list: "ordered" }, { list: "bullet" }],
      ["link", "image"],
      ["clean"],
    ],
  },
};

onMounted(() => {
  quill = new Quill(editorContainer.value, quillOptions);
  quill.root.innerHTML = content.value || "";

  // Ajuste la hauteur au montage
  setTimeout(adjustEditorHeight, 100);

  quill.on("text-change", () => {
    const html = quill.root.innerHTML.trim();
    content.value = html === "<p><br></p>" ? "" : html;
    hoggarinput.hogarDataValues[props.cle] = content.value;
    adjustEditorHeight();
  });
});

// Watch pour synchroniser les changements externes
watch(
  () => hoggarinput.hogarDataValues[props.cle],
  (newValue) => {
    if (quill && newValue !== quill.root.innerHTML) {
      content.value = newValue;
      quill.clipboard.dangerouslyPasteHTML(newValue);
      adjustEditorHeight();
    }
  }
);
</script>

<style scoped>
::v-deep(.ql-container) {
  border: none !important;
  padding: 0 !important;
  transition: height 0.15s ease;
}

::v-deep(.ql-toolbar) {
  border: none !important;
  margin-bottom: 0.5rem;
}
</style>